import java.util.ArrayList;


public abstract class LiftOperator implements Steppable {
	
	class ElevatorCall {
		Floor floor;
		Elevator.DIRECTION direction;
		
		public ElevatorCall(Floor floor, Elevator.DIRECTION direction) {
			this.floor = floor;
			this.direction = direction;
		}
		
		public Floor getFloor() {
			return floor;
		}
		
		public Elevator.DIRECTION getDirection() {
			return direction;
		}
	}
	
	ArrayList<ElevatorCall> elevatorCalls;
	
	public LiftOperator() {
		World.steppables.add(this);
		elevatorCalls = new ArrayList<ElevatorCall>();
	}
	
	public abstract void step();
	
	public double distanceFromFloor(Floor floor, Elevator elevator) {
		Floor pointer = null;
		double height = 0;
		int i = 0;
		do {
			if (pointer != null)
				height += pointer.getHeight();
			pointer = World.getBuilding().getFloors().get(i);
			i++;
		} while (pointer != floor);
		return Math.abs(height-elevator.getLocation());
	}
	
	public Floor getFloor(Elevator elevator) {
		int height = 0;
		int i = 0;
		while (height < elevator.getLocation() && i < World.getBuilding().getFloors().size()) {
			height += World.getBuilding().getFloors().get(i).getHeight();
			i++;
		}
		if (height-elevator.getLocation() == 0) {
			elevator.adjacentSpace.add(World.getBuilding().getFloors().get(i-1));
			return World.getBuilding().getFloors().get(i-1);
		}
		else return null;
	}
	
	public void setElevatorState(Elevator.DIRECTION direction, Elevator elevator) {
		elevator.setState(direction);
	}
	
	public void callElevator(Floor floor, Elevator.DIRECTION direction) {
		elevatorCalls.add(new ElevatorCall(floor, direction));
	}
	
}
