import java.util.Random;


public class Floor
{
	/**
	 * The maximum number of guests randomly generated per call to generateGuests()
	 * who want to go to one floor. (Therefore, the total number of guests generated by generateGuests()
	 * is rand(0, MAX_PER_DESTINATION) * numberOfFloors.)
	 */
	private static final int	MAX_PER_DESTINATION = 5;
	/**
	 * The percent chance that a call to generateGuests() will actually generate any guests.
	 * Precise only to tenths place.
	 */
	private static final double	GUEST_GENERATION_ODDS_PERCENT = 0.3;
	/**
	 * The total number of floors in the system.
	 */
	private int			numberOfFloors;
	/**
	 * The number of this floor. Starts at zero, signifying the ground floor.
	 */
	private int			id;
	/**
	 * Array whose sum represents the number of guests on this floor. 
	 * guests[X] indicates the number of guests who want to travel to floor X.
	 * Equal in size to the number of floors.
	 */
	private int[]		guests;
	/**
	 * Pseudorandom number generator used in generateGuests().
	 */
	private Random		rand;
	/**
	 * Constructs a new Floor with a given ordinal number and reference to number of total floors.
	 * @param _id number of this floor
	 * @param _numberOfFloors total number of floors in the system
	 */
	public Floor(int _id, int _numberOfFloors)
	{
		id = _id;
		numberOfFloors = _numberOfFloors;
		
		rand = new Random();
		
		guests = new int[numberOfFloors];
		generateGuests();

		System.out.println();
	}
	
	public int[] getGuests()
	{
		return guests;
	}
	
	/**
	 * Puts all guests from this floor who want to go up into the array provided.
	 * Note: the array passed to the function is assumed to be as large as the array of
	 * floors; each of the guests from the floor is added to this array.
	 * @param guestsGoingUp reference to guests[] array 
	 */
	public void takeGuestsGoingUp(int[] guestsGoingUp)
	{
		for(int i = id; i < numberOfFloors; i++)
		{
			guestsGoingUp[i] += guests[i];
			guests[i] = 0;
		}
		System.out.println("TakeGuestsGoingUp");
	}
	/**
	 * Puts all guests from this floor who want to go down into the array provided.
	 * Note: the array passed to the function is assumed to be as large as the array of
	 * floors; each of the guests from the floor is added to this array.
	 * @param guestsGoingDown reference to guests[] array 
	 */	
	public void takeGuestsGoingDown(int[] guestsGoingDown)
	{
		for(int i = 0; i <= id; i++)
		{
			guestsGoingDown[i] += guests[i];
			guests[i] = 0;
		}
	}
	
	/**
	 * Randomly adds between 0 and (MAX_PER_DESTINATION * numberOfFloors) guests to this floor.
	 * Each guest's preference of floor is random, except no guest will want to travel to the floor
	 * it is currently on.
	 */
	public void generateGuests()
	{
		if ( rand.nextInt(1000) > ((10*GUEST_GENERATION_ODDS_PERCENT)-1) )
			return;
		for(int i = 0; i < numberOfFloors; i++)
		{
			if (i != id)
				{ guests[i] += rand.nextInt(MAX_PER_DESTINATION); }
			else
				{ guests[i] = 0; }
		}		
	}
	/**
	 * Returns the direction over 50% of guests on this floor want to travel in.
	 * If an equal number of guests want to go up and down this function will return Elevator.Direction.DOWN.
	 * @return Elevator.Direction.UP or Elevator.Direction.DOWN
	 */
	public Elevator.Direction majorityDirectionPreference()
	{
		int	up = 0, down = 0;
		for(int i = 0; i < id; i++)
			down += guests[i];
		for(int i = id; i < numberOfFloors; i++)
			up += guests[i];
		
		Elevator.Direction result = (up > down ? Elevator.Direction.UP : Elevator.Direction.DOWN);
		//System.out.println("DirectionPreference: "+result);
		return result;
	}
	
	
	
}
